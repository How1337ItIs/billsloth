#!/bin/bash
# Ultimate Bill Sloth Integration - The ADHD-friendly, token-saving, ATHF-themed Linux helper

echo "ü¶• BILL SLOTH ULTIMATE HELPER"
echo "============================="
echo "üçî Meatwad: 'I understand! Everything is connected now!'"
echo ""

# Initialize all systems
initialize_systems() {
    echo "üöÄ Initializing all Bill Sloth systems..."
    
    # Create necessary directories
    mkdir -p ~/bin ~/.billsloth-brain ~/.billsloth-reminders ~/.billsloth-local/{workflows,solutions,patterns}
    
    # Initialize Bill Sloth systems
    echo "üì° Starting adaptive learning..."
    source ~/.bill-sloth/lib/adaptive_learning.sh 2>/dev/null && init_adaptive_learning &
    
    echo "üîî Initializing data persistence..."
    source ~/.bill-sloth/lib/data_persistence.sh 2>/dev/null && init_data_persistence &
    
    echo "üéØ Loading ATHF personality matrix..."
    sleep 1
    
    echo "‚úÖ All systems online!"
    echo ""
}

# Smart dashboard that shows everything
show_ultimate_dashboard() {
    clear
    echo -e "\033[35m"
    cat << 'BANNER'
    ü¶• BILL SLOTH ULTIMATE CONTROL CENTER ü¶•
    =========================================
BANNER
    echo -e "\033[0m"
    echo ""
    
    # System status
    echo "üìä SYSTEM STATUS:"
    echo "=================="
    
    # VPN status (important for torrenting)
    if ip addr | grep -q "tun\|wg"; then
        echo "üõ°Ô∏è VPN: ‚úÖ ACTIVE (safe for torrenting)"
    else
        echo "üõ°Ô∏è VPN: ‚ùå INACTIVE (NOT safe for public torrents)"
    fi
    
    # Pattern learning status  
    if [ -f ~/.bill-sloth/data/bill_sloth.db ]; then
        local usage_count=$(sqlite3 ~/.bill-sloth/data/bill_sloth.db "SELECT COUNT(*) FROM module_usage;" 2>/dev/null || echo "0")
        echo "üß† Learning: $usage_count usage patterns recorded"
    else
        echo "üß† Learning: Just started learning your patterns"
    fi
    
    # Task execution status
    if [ -f ~/.bill-sloth/data/bill_sloth.db ]; then
        local success_tasks=$(sqlite3 ~/.bill-sloth/data/bill_sloth.db "SELECT COUNT(*) FROM task_history WHERE status='success';" 2>/dev/null || echo "0")
        local total_tasks=$(sqlite3 ~/.bill-sloth/data/bill_sloth.db "SELECT COUNT(*) FROM task_history;" 2>/dev/null || echo "0")
        echo "üí∞ Task Success: $success_tasks / $total_tasks completed successfully"
    else
        echo "üí∞ Task Success: No execution data yet"
    fi
    
    # Current time context
    local hour=$(date '+%H')
    local weekday=$(date '+%A')
    echo "‚è∞ Context: $weekday, $(date '+%H:%M') - $(get_time_context)"
    
    echo ""
    echo "üéÆ SMART QUICK ACCESS:"
    echo "======================"
    echo "1) üé§ Voice Interface (F11) - Just talk to Meatwad!"
    echo "2) üß† Smart Suggestions - Based on your patterns"
    echo "3) üè† VRBO Management - Guest workflow automation"
    echo "4) üé¨ Streaming Setup - OBS + audio routing"
    echo "5) üéÆ Gaming Mode - Optimize and launch games"
    echo "6) üè¥‚Äç‚ò†Ô∏è Data Hoarding - Safe torrenting dashboard"
    echo "7) ‚ö° Focus Session - ADHD-friendly productivity"
    echo "8) üîß System Tools - Updates, fixes, maintenance"
    echo "9) üí≠ Brain Dump - Clear your mental cache"
    echo "0) ü§ñ Claude Code - For complex problem solving"
    echo ""
    read -p "üçî Meatwad: Choose what you wanna do: " choice
    
    handle_dashboard_choice "$choice"
}

# Context-aware suggestions
get_time_context() {
    local hour=$(date '+%H')
    
    if [ $hour -ge 6 ] && [ $hour -lt 12 ]; then
        echo "Morning routine time"
    elif [ $hour -ge 12 ] && [ $hour -lt 17 ]; then
        echo "Peak productivity hours"
    elif [ $hour -ge 17 ] && [ $hour -lt 21 ]; then
        echo "Evening tasks"
    else
        echo "Late night mode"
    fi
}

# Handle dashboard choices intelligently
handle_dashboard_choice() {
    local choice="$1"
    
    case "$choice" in
        1)
            echo "üé§ Starting voice interface..."
            bash ~/.bill-sloth/modules/voice_assistant_interactive.sh
            ;;
        2)
            echo "üß† Getting smart suggestions..."
            source ~/.bill-sloth/lib/adaptive_learning.sh && show_suggestions
            ;;
        3)
            echo "üè† Opening VRBO management..."
            bash ~/.bill-sloth/modules/vacation_rental_manager_interactive.sh
            ;;
        4)
            echo "üé¨ Setting up streaming..."
            bash ~/.bill-sloth/modules/streaming_setup_interactive.sh
            ;;
        5)
            echo "üéÆ Activating gaming mode..."
            bash ~/.bill-sloth/modules/gaming_boost_interactive.sh
            ;;
        6)
            echo "üè¥‚Äç‚ò†Ô∏è Opening data hoarding dashboard..."
            bash ~/.bill-sloth/modules/data_hoarding_interactive.sh
            ;;
        7)
            echo "‚ö° Starting focus session..."
            bash ~/.bill-sloth/modules/productivity_suite_interactive.sh
            ;;
        8)
            echo "üîß System maintenance menu..."
            show_system_menu
            ;;
        9)
            echo "üí≠ Brain dump time..."
            source ~/.bill-sloth/lib/data_persistence.sh && store_data "brain_dump" "$(date +%s)" "$(zenity --entry --text='Brain dump:' 2>/dev/null || read -p 'Brain dump: ' && echo $REPLY)"
            echo "üí≠ Brain dump saved!"
            ;;
        0)
            echo "ü§ñ Opening Claude Code lab..."
            cd ~/.bill-sloth && bash lab.sh
            ;;
        "q"|"quit"|"exit")
            echo "üçî Meatwad: 'Bye! I understand!'"
            exit 0
            ;;
        *)
            echo "üçî Meatwad: 'I don't get that number! Try again!'"
            sleep 2
            show_ultimate_dashboard
            ;;
    esac
}

# System maintenance menu
show_system_menu() {
    echo ""
    echo "üîß SYSTEM TOOLS:"
    echo "================"
    echo "a) Update everything"
    echo "b) Fix audio issues"
    echo "c) Check VPN status"
    echo "d) Clean system"
    echo "e) Check system health"
    echo "f) Back to main menu"
    echo ""
    read -p "Choose tool: " tool
    
    case "$tool" in
        a) bash ~/.bill-sloth/modules/system_ops_interactive.sh ;;
        b) bash ~/.bill-sloth/modules/system_doctor_interactive.sh ;;
        c) bash ~/.bill-sloth/modules/network_management_interactive.sh ;;
        d) bash ~/.bill-sloth/modules/system_doctor_interactive.sh ;;
        e) source ~/.bill-sloth/lib/system_health_monitoring.sh && check_system_health ;;
        f) show_ultimate_dashboard ;;
        *) echo "Invalid choice" && sleep 1 && show_system_menu ;;
    esac
}

# Emergency ADHD intervention
adhd_emergency() {
    echo "üö® ADHD EMERGENCY MODE ACTIVATED"
    echo "================================="
    echo ""
    echo "üçî Meatwad: 'Hey, it's ok! Let's just do ONE thing.'"
    echo ""
    echo "Quick calming actions:"
    echo "1) üí≠ Brain dump (get it all out of your head)"
    echo "2) ‚è∞ 15-minute timer (just one small task)"
    echo "3) üéµ Background music + simple task"
    echo "4) üö∂ Take a 5-minute walk"
    echo "5) üíß Drink water + deep breaths"
    echo ""
    read -p "Pick ONE (1-5): " emergency_choice
    
    case "$emergency_choice" in
        1) ~/bin/brain-dump ;;
        2) echo "‚è∞ 15 minutes starting NOW!" && sleep 900 && notify-send "Time's up! Good job!" ;;
        3) echo "üéµ Playing focus music..." ;;
        4) echo "üö∂ Go take that walk. I'll be here when you get back." ;;
        5) echo "üíß Hydrate and breathe. You got this." ;;
    esac
}

# Command line interface
case "$1" in
    "dashboard"|"")
        initialize_systems
        show_ultimate_dashboard
        ;;
    "emergency"|"help"|"adhd")
        adhd_emergency
        ;;
    "voice")
        ~/bin/voice-interface
        ;;
    "smart")
        ~/bin/local-first-router "$2 $3 $4 $5"
        ;;
    "learn")
        ~/bin/bill-brain analyze
        ;;
    *)
        echo "ü¶• Bill Sloth Ultimate Helper"
        echo "Usage:"
        echo "  bill-sloth-ultimate                 - Main dashboard"
        echo "  bill-sloth-ultimate voice           - Voice interface"
        echo "  bill-sloth-ultimate smart <request> - Smart local-first handling"
        echo "  bill-sloth-ultimate emergency       - ADHD emergency mode"
        echo "  bill-sloth-ultimate learn           - Show learned patterns"
        ;;
esac