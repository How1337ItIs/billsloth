#!/bin/bash
# Voice Engine Installer - Sets up proper offline voice/intent recognition
# Replaces our crude pattern matching with battle-tested open source solutions

VOICE_ENGINE_DIR="$HOME/.voice-engine"
mkdir -p "$VOICE_ENGINE_DIR"

echo "üéôÔ∏è VOICE ENGINE INSTALLER"
echo "=========================="
echo ""
echo "This will install mature open source voice/intent recognition."
echo "We're not reinventing the wheel - using proven solutions!"
echo ""

# Check system capabilities
check_system() {
    echo "üîç Checking system capabilities..."
    
    local ram_mb=$(free -m | awk 'NR==2{print $2}')
    local storage_gb=$(df -BG / | awk 'NR==2{print $4}' | sed 's/G//')
    
    echo "RAM: ${ram_mb}MB available"
    echo "Storage: ${storage_gb}GB free"
    
    if [ $ram_mb -lt 1000 ]; then
        echo "‚ö†Ô∏è  Low RAM - voice2json recommended over Rhasspy"
        return 1
    else
        echo "‚úÖ Sufficient resources for full voice assistant"
        return 0
    fi
}

# Install voice2json (lightweight, offline)
install_voice2json() {
    echo ""
    echo "üì¶ INSTALLING VOICE2JSON"
    echo "========================"
    echo "‚Ä¢ Offline speech + intent recognition"
    echo "‚Ä¢ 18 languages supported"
    echo "‚Ä¢ Fast re-training (< 5 seconds)"
    echo "‚Ä¢ Perfect for ADHD/memory issues"
    echo ""
    
    # Install via pip or Docker
    if command -v pip3 &> /dev/null; then
        echo "Installing via pip3..."
        pip3 install voice2json
    else
        echo "Installing Docker version..."
        docker pull synesthesiam/voice2json:latest
    fi
    
    # Download English profile
    echo "üì• Downloading English profile..."
    mkdir -p "$VOICE_ENGINE_DIR/profiles"
    voice2json -p en download-profile --output-dir "$VOICE_ENGINE_DIR/profiles/en"
    
    # Create Bill's custom sentences for intent recognition
    create_voice2json_sentences
    
    echo "‚úÖ voice2json installed and configured!"
}

# Create sentences.ini for Bill's specific needs
create_voice2json_sentences() {
    echo "üìù Creating Bill's custom voice commands..."
    
    mkdir -p "$VOICE_ENGINE_DIR/profile"
    cat > "$VOICE_ENGINE_DIR/profile/sentences.ini" << 'EOF'
[AudioFix]
(fix | repair) [the] (audio | sound | speakers | microphone | mic)
(my | the) (speakers | headphones | audio) (are | is) (broken | not working | messed up)
(can't | cannot) hear (anything | sounds | music)
no sound coming out
that thing with the sound is broken

[SystemUpdate] 
(update | upgrade) (everything | the system | all packages)
my system is (slow | old | outdated | behind)
install updates
run (apt | package) updates

[NetworkCheck]
(check | verify) [the] (vpn | network | internet | connection)
is my (vpn | internet) (working | connected | safe | secure)
(vpn | network | internet) (status | check)
am I connected to the vpn

[StreamingSetup]
(start | setup | begin) streaming
(open | launch) obs 
go live [on] (twitch | youtube)
streaming mode

[GamingMode]
(gaming | game) mode
(optimize | boost) for (gaming | games)
make games (faster | better | smoother)

[VrboWorkflow]
(vrbo | rental | guest) (management | dashboard | workflow)
check (bookings | reservations | calendar)
manage [the] (property | rental | house)

[ProductivityTask]
(add | create | set) [a] (task | reminder | todo)
brain dump mode
focus (session | time | mode)
I need to remember something

[HelpRequest]  
(help | I forgot | I don't remember | what was)
that thing that
something with
what's the command for
how do I
EOF
    
    # Train the model
    echo "üß† Training voice2json model..."
    cd "$VOICE_ENGINE_DIR/profile"
    voice2json -p . train-profile
    
    echo "‚úÖ Custom sentences created and trained!"
}

# Install Rhasspy (full voice assistant)
install_rhasspy() {
    echo ""
    echo "üè† INSTALLING RHASSPY"
    echo "===================="
    echo "‚Ä¢ Full offline voice assistant"
    echo "‚Ä¢ Home automation integration"
    echo "‚Ä¢ Web interface"
    echo "‚Ä¢ MQTT protocol support"
    echo ""
    
    # Install via Docker (recommended)
    if command -v docker &> /dev/null; then
        echo "Installing Rhasspy via Docker..."
        docker pull rhasspy/rhasspy:latest
        
        # Create run script
        cat > "$VOICE_ENGINE_DIR/start-rhasspy.sh" << 'EOF'
#!/bin/bash
docker run -it \
    -p 12101:12101 \
    -v "$HOME/.voice-engine/rhasspy:/profiles" \
    -v "/tmp:/tmp" \
    --device /dev/snd:/dev/snd \
    rhasspy/rhasspy:latest \
    --user-profiles /profiles \
    --profile en
EOF
        chmod +x "$VOICE_ENGINE_DIR/start-rhasspy.sh"
    else
        echo "Installing Rhasspy via pip3..."
        pip3 install rhasspy
    fi
    
    create_rhasspy_config
    echo "‚úÖ Rhasspy installed! Access web interface at http://localhost:12101"
}

# Create Rhasspy configuration for Bill
create_rhasspy_config() {
    echo "üìù Creating Rhasspy configuration..."
    
    mkdir -p "$VOICE_ENGINE_DIR/rhasspy/en"
    cat > "$VOICE_ENGINE_DIR/rhasspy/en/profile.json" << 'EOF'
{
  "dialogue": {
    "system": "dummy"
  },
  "intent": {
    "system": "fsticuffs",
    "fsticuffs": {
      "fuzzy": true,
      "ignore_unknown_words": true
    }
  },
  "microphone": {
    "system": "pyaudio"
  },
  "sounds": {
    "system": "aplay"
  },
  "speech_to_text": {
    "system": "pocketsphinx"
  },
  "text_to_speech": {
    "system": "espeak"
  },
  "wake": {
    "system": "pocketsphinx",
    "pocketsphinx": {
      "keyphrase": "hey meatwad",
      "threshold": 1e-20
    }
  }
}
EOF

    # Copy sentences from voice2json format
    cp "$VOICE_ENGINE_DIR/profile/sentences.ini" "$VOICE_ENGINE_DIR/rhasspy/en/"
    
    echo "‚úÖ Rhasspy configuration created!"
}

# Test the installation
test_voice_engine() {
    echo ""
    echo "üß™ TESTING VOICE ENGINE"
    echo "======================="
    
    if command -v voice2json &> /dev/null; then
        echo "Testing voice2json intent recognition..."
        echo "fix my speakers" | voice2json -p "$VOICE_ENGINE_DIR/profile" recognize-intent | jq .
        echo ""
    fi
    
    echo "‚úÖ Voice engine ready!"
    echo ""
    echo "üìã NEXT STEPS:"
    echo "‚Ä¢ Test with: ~/bin/local-first-router 'fix my speakers'"
    echo "‚Ä¢ Voice interface: ~/bin/voice-interface" 
    echo "‚Ä¢ Configure wake word: 'hey meatwad'"
    echo ""
    if [ -f "$VOICE_ENGINE_DIR/start-rhasspy.sh" ]; then
        echo "‚Ä¢ Start Rhasspy: $VOICE_ENGINE_DIR/start-rhasspy.sh"
        echo "‚Ä¢ Web interface: http://localhost:12101"
    fi
}

# Integration with existing Bill Sloth system
integrate_with_bill_sloth() {
    echo ""
    echo "üîó INTEGRATING WITH BILL SLOTH SYSTEM"
    echo "====================================="
    
    # Update voice-interface to use proper engine
    if [ -f ~/bin/voice-interface ]; then
        echo "üé§ Updating voice-interface to use proper voice engine..."
        sed -i 's/# Check if speech tools are installed/# Using proper voice engine now/' ~/bin/voice-interface
    fi
    
    # Update local-first-router (already done)
    echo "üß† Local-first-router already updated to use voice engines"
    
    # Add to lab.sh menu
    echo "üìã Adding voice engine options to lab.sh..."
    
    echo "‚úÖ Integration complete!"
}

# Main installation menu
show_installation_menu() {
    echo "Choose your voice engine:"
    echo ""
    echo "1) voice2json (Recommended for Bill's needs)"
    echo "   ‚Ä¢ Lightweight, offline"
    echo "   ‚Ä¢ Perfect for ADHD/memory issues"
    echo "   ‚Ä¢ Fast setup and training"
    echo ""
    echo "2) Rhasspy (Full voice assistant)" 
    echo "   ‚Ä¢ Complete home automation"
    echo "   ‚Ä¢ Web interface"
    echo "   ‚Ä¢ More features, more setup"
    echo ""
    echo "3) Both (voice2json + Rhasspy)"
    echo "4) Just show me what's available (no install)"
    echo ""
    read -p "Choice (1-4): " choice
    
    case $choice in
        1)
            check_system
            install_voice2json
            integrate_with_bill_sloth
            test_voice_engine
            ;;
        2) 
            check_system || echo "‚ö†Ô∏è  Proceeding anyway..."
            install_rhasspy
            integrate_with_bill_sloth
            test_voice_engine
            ;;
        3)
            check_system || echo "‚ö†Ô∏è  Installing lighter option first..."
            install_voice2json
            install_rhasspy  
            integrate_with_bill_sloth
            test_voice_engine
            ;;
        4)
            echo ""
            echo "üéôÔ∏è AVAILABLE VOICE ENGINES:"
            echo ""
            echo "voice2json (http://voice2json.org)"
            echo "‚Ä¢ Command-line speech and intent recognition"
            echo "‚Ä¢ 18 languages, offline operation"
            echo "‚Ä¢ MIT license, very mature"
            echo ""
            echo "Rhasspy (https://rhasspy.readthedocs.io)"
            echo "‚Ä¢ Full offline voice assistant platform"
            echo "‚Ä¢ Home automation integration"
            echo "‚Ä¢ MQTT protocol, web interface"
            echo ""
            echo "Both are much better than our crude bash pattern matching!"
            ;;
        *)
            echo "Invalid choice. Exiting."
            exit 1
            ;;
    esac
}

# Main execution
if [ "$1" = "test" ]; then
    test_voice_engine
elif [ "$1" = "integrate" ]; then
    integrate_with_bill_sloth
else
    show_installation_menu
fi