#!/bin/bash
# Voice Mode Switcher - Toggle between wake words and hotkey activation
# "Flexibility is the key to air power... and voice control" - General Patton (probably)

set -euo pipefail

source "$(dirname "$0")/../lib/include_loader.sh"
load_includes "core" "notification" "error_handling"

LOG_FILE="$HOME/.bill-sloth/logs/voice_mode.log"
mkdir -p "$(dirname "$LOG_FILE")"

log_voice() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

show_banner() {
    echo -e "\033[38;5;129m"
    cat << 'EOF'
    ██╗   ██╗ ██████╗ ██╗ ██████╗███████╗    ███╗   ███╗ ██████╗ ██████╗ ███████╗
    ██║   ██║██╔═══██╗██║██╔════╝██╔════╝    ████╗ ████║██╔═══██╗██╔══██╗██╔════╝
    ██║   ██║██║   ██║██║██║     █████╗      ██╔████╔██║██║   ██║██║  ██║█████╗  
    ╚██╗ ██╔╝██║   ██║██║██║     ██╔══╝      ██║╚██╔╝██║██║   ██║██║  ██║██╔══╝  
     ╚████╔╝ ╚██████╔╝██║╚██████╗███████╗    ██║ ╚═╝ ██║╚██████╔╝██████╔╝███████╗
      ╚═══╝   ╚═════╝ ╚═╝ ╚═════╝╚══════╝    ╚═╝     ╚═╝ ╚═════╝ ╚═════╝ ╚══════╝
EOF
    echo -e "\033[0m"
}

create_hotkey_daemon() {
    log_voice "🔥 Creating hotkey-based voice daemon..."
    
    cat > ~/.bill-sloth/voice/hotkey_daemon.py << 'EOF'
#!/usr/bin/env python3
"""
Bill Sloth Hotkey Voice Daemon - Push-to-talk activation
More resource-efficient alternative to always-listening mode
"""

import whisper
import pyaudio
import wave
import threading
import time
import json
import subprocess
import os
import signal
import sys
from datetime import datetime
import pyttsx3
from pynput import keyboard
from pynput.keyboard import Key, Listener

class BillSlothHotkeyDaemon:
    def __init__(self):
        self.model = whisper.load_model("base")
        self.listening = False
        self.recording = False
        self.commands_file = os.path.expanduser("~/.bill-sloth/voice/commands.json")
        self.log_file = os.path.expanduser("~/.bill-sloth/logs/voice_daemon.log")
        self.config_file = os.path.expanduser("~/.bill-sloth/voice/config.json")
        
        # Load configuration
        self.load_config()
        
        # Initialize TTS
        self.tts = pyttsx3.init()
        self.tts.setProperty('rate', 180)
        self.tts.setProperty('volume', 0.8)
        
        # Audio settings
        self.chunk = 1024
        self.format = pyaudio.paInt16
        self.channels = 1
        self.rate = 16000
        
        self.audio = pyaudio.PyAudio()
        
        # Load voice commands
        self.load_voice_commands()
        
        # Setup hotkey listener
        self.setup_hotkey_listener()
        
    def load_config(self):
        """Load voice control configuration"""
        try:
            with open(self.config_file, 'r') as f:
                config = json.load(f)
        except FileNotFoundError:
            config = self.create_default_config()
            self.save_config(config)
        
        self.hotkey_combo = config.get('hotkey_combo', ['ctrl', 'alt', 'v'])
        self.record_duration = config.get('record_duration', 5)
        self.feedback_enabled = config.get('feedback_enabled', True)
    
    def create_default_config(self):
        """Create default configuration"""
        return {
            "mode": "hotkey",
            "hotkey_combo": ["ctrl", "alt", "v"],
            "record_duration": 5,
            "feedback_enabled": True,
            "wake_words": ["hey bill", "bill sloth", "jarvis", "computer"]
        }
    
    def save_config(self, config):
        """Save configuration to file"""
        os.makedirs(os.path.dirname(self.config_file), exist_ok=True)
        with open(self.config_file, 'w') as f:
            json.dump(config, f, indent=2)
    
    def log(self, message):
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        with open(self.log_file, "a") as f:
            f.write(f"[{timestamp}] HOTKEY: {message}\n")
        print(f"[{timestamp}] HOTKEY: {message}")
    
    def speak(self, text):
        """Text-to-speech response"""
        if self.feedback_enabled:
            self.log(f"Speaking: {text}")
            self.tts.say(text)
            self.tts.runAndWait()
    
    def load_voice_commands(self):
        """Load voice command definitions"""
        try:
            with open(self.commands_file, 'r') as f:
                self.commands = json.load(f)
        except FileNotFoundError:
            self.commands = {}
            self.log("No commands file found")
    
    def setup_hotkey_listener(self):
        """Setup global hotkey listener"""
        self.pressed_keys = set()
        
        def on_press(key):
            try:
                # Handle special keys
                if key == Key.ctrl_l or key == Key.ctrl_r:
                    self.pressed_keys.add('ctrl')
                elif key == Key.alt_l or key == Key.alt_r:
                    self.pressed_keys.add('alt')
                elif key == Key.shift:
                    self.pressed_keys.add('shift')
                elif hasattr(key, 'char') and key.char:
                    self.pressed_keys.add(key.char.lower())
                
                # Check if hotkey combination is pressed
                if self.is_hotkey_pressed():
                    if not self.recording:
                        self.start_voice_recording()
                        
            except AttributeError:
                pass
        
        def on_release(key):
            try:
                # Handle special keys
                if key == Key.ctrl_l or key == Key.ctrl_r:
                    self.pressed_keys.discard('ctrl')
                elif key == Key.alt_l or key == Key.alt_r:
                    self.pressed_keys.discard('alt')
                elif key == Key.shift:
                    self.pressed_keys.discard('shift')
                elif hasattr(key, 'char') and key.char:
                    self.pressed_keys.discard(key.char.lower())
                    
            except AttributeError:
                pass
        
        # Start keyboard listener
        self.listener = Listener(on_press=on_press, on_release=on_release)
        self.listener.start()
        self.log(f"Hotkey listener started - Press {'+'.join(self.hotkey_combo).upper()} to activate voice")
    
    def is_hotkey_pressed(self):
        """Check if the configured hotkey combination is pressed"""
        return all(key in self.pressed_keys for key in self.hotkey_combo)
    
    def start_voice_recording(self):
        """Start recording voice command"""
        if self.recording:
            return
            
        self.recording = True
        self.log("Hotkey detected - starting voice recording...")
        self.speak("Listening...")
        
        # Record audio in separate thread to avoid blocking
        threading.Thread(target=self.record_and_process, daemon=True).start()
    
    def record_and_process(self):
        """Record audio and process command"""
        try:
            # Record audio
            stream = self.audio.open(
                format=self.format,
                channels=self.channels,
                rate=self.rate,
                input=True,
                frames_per_buffer=self.chunk
            )
            
            frames = []
            for _ in range(0, int(self.rate / self.chunk * self.record_duration)):
                data = stream.read(self.chunk, exception_on_overflow=False)
                frames.append(data)
            
            stream.stop_stream()
            stream.close()
            
            # Save and transcribe
            temp_audio = "/tmp/hotkey_command.wav"
            wf = wave.open(temp_audio, 'wb')
            wf.setnchannels(self.channels)
            wf.setsampwidth(self.audio.get_sample_size(self.format))
            wf.setframerate(self.rate)
            wf.writeframes(b''.join(frames))
            wf.close()
            
            # Transcribe with Whisper
            result = self.model.transcribe(temp_audio)
            command = result["text"].lower().strip()
            
            if command and len(command) > 2:
                self.log(f"Command received: {command}")
                self.execute_voice_command(command)
            else:
                self.speak("No command detected")
            
            os.remove(temp_audio)
            
        except Exception as e:
            self.log(f"Error in voice recording: {e}")
            self.speak("Recording error")
        finally:
            self.recording = False
    
    def execute_voice_command(self, command):
        """Execute the voice command (same as wake word daemon)"""
        self.log(f"Executing command: {command}")
        
        # Find matching command
        executed = False
        
        for category, commands in self.commands.items():
            for voice_phrase, shell_command in commands.items():
                if voice_phrase in command:
                    self.log(f"Matched command: {voice_phrase} -> {shell_command}")
                    self.speak(f"Executing {voice_phrase}")
                    
                    try:
                        result = subprocess.run(
                            shell_command,
                            shell=True,
                            capture_output=True,
                            text=True,
                            timeout=30
                        )
                        
                        if result.returncode == 0:
                            self.speak("Command completed")
                            if result.stdout and len(result.stdout.strip()) < 100:
                                self.speak(result.stdout.strip()[:50])
                        else:
                            self.speak("Command failed")
                            self.log(f"Command failed: {result.stderr}")
                        
                        executed = True
                        break
                        
                    except subprocess.TimeoutExpired:
                        self.speak("Command timed out")
                        executed = True
                        break
                    except Exception as e:
                        self.log(f"Error executing command: {e}")
                        self.speak("Error executing command")
                        executed = True
                        break
            
            if executed:
                break
        
        if not executed:
            self.speak("Command not recognized")
    
    def run(self):
        """Main daemon loop"""
        self.log("Hotkey voice daemon started")
        try:
            while True:
                time.sleep(1)  # Much lower CPU usage than always-listening
        except KeyboardInterrupt:
            self.shutdown()
    
    def shutdown(self):
        """Shutdown the daemon"""
        self.log("Shutting down hotkey voice daemon...")
        self.listener.stop()
        self.audio.terminate()

def signal_handler(sig, frame):
    print("\nShutting down hotkey daemon...")
    daemon.shutdown()
    sys.exit(0)

if __name__ == "__main__":
    daemon = BillSlothHotkeyDaemon()
    
    # Set up signal handlers
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    try:
        daemon.run()
    except KeyboardInterrupt:
        daemon.shutdown()
EOF
    
    chmod +x ~/.bill-sloth/voice/hotkey_daemon.py
    log_voice "✅ Hotkey daemon created"
}

create_adaptive_voice_daemon() {
    log_voice "🧠 Creating adaptive voice daemon..."
    
    cat > ~/.bill-sloth/voice/adaptive_daemon.py << 'EOF'
#!/usr/bin/env python3
"""
Adaptive Voice Daemon - Automatically switches between wake word and hotkey modes
based on performance, resource usage, and user preferences
"""

import json
import os
import time
import psutil
import subprocess
import threading
from datetime import datetime

class AdaptiveVoiceDaemon:
    def __init__(self):
        self.config_file = os.path.expanduser("~/.bill-sloth/voice/config.json")
        self.stats_file = os.path.expanduser("~/.bill-sloth/voice/stats.json")
        self.log_file = os.path.expanduser("~/.bill-sloth/logs/voice_adaptive.log")
        
        self.load_config()
        self.load_stats()
        
        self.current_mode = None
        self.daemon_process = None
        
    def load_config(self):
        """Load voice configuration"""
        try:
            with open(self.config_file, 'r') as f:
                self.config = json.load(f)
        except FileNotFoundError:
            self.config = {
                "mode": "auto",  # auto, wake_word, hotkey
                "auto_switch_enabled": True,
                "cpu_threshold": 15.0,  # Switch to hotkey if wake word uses >15% CPU
                "accuracy_threshold": 0.8,  # Switch if accuracy drops below 80%
                "resource_check_interval": 300  # Check every 5 minutes
            }
            self.save_config()
    
    def save_config(self):
        """Save configuration"""
        with open(self.config_file, 'w') as f:
            json.dump(self.config, f, indent=2)
    
    def load_stats(self):
        """Load performance statistics"""
        try:
            with open(self.stats_file, 'r') as f:
                self.stats = json.load(f)
        except FileNotFoundError:
            self.stats = {
                "wake_word": {"cpu_usage": [], "accuracy": [], "activations": 0},
                "hotkey": {"cpu_usage": [], "accuracy": [], "activations": 0}
            }
    
    def save_stats(self):
        """Save performance statistics"""
        with open(self.stats_file, 'w') as f:
            json.dump(self.stats, f, indent=2)
    
    def log(self, message):
        """Log message"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        with open(self.log_file, "a") as f:
            f.write(f"[{timestamp}] ADAPTIVE: {message}\n")
        print(f"[{timestamp}] ADAPTIVE: {message}")
    
    def get_optimal_mode(self):
        """Determine optimal voice mode based on current conditions"""
        if not self.config.get("auto_switch_enabled", True):
            return self.config.get("mode", "wake_word")
        
        # Check system resources
        cpu_percent = psutil.cpu_percent(interval=1)
        memory_percent = psutil.virtual_memory().percent
        
        # Check if running on battery (laptop)
        try:
            battery = psutil.sensors_battery()
            on_battery = battery and not battery.power_plugged
        except:
            on_battery = False
        
        # Decision logic
        reasons = []
        
        # High CPU usage -> prefer hotkey
        if cpu_percent > 70:
            reasons.append("High CPU usage")
            return "hotkey", reasons
        
        # On battery -> prefer hotkey (lower power)
        if on_battery:
            reasons.append("Running on battery")
            return "hotkey", reasons
        
        # High memory usage -> prefer hotkey
        if memory_percent > 80:
            reasons.append("High memory usage")
            return "hotkey", reasons
        
        # Check historical performance
        wake_stats = self.stats.get("wake_word", {})
        hotkey_stats = self.stats.get("hotkey", {})
        
        # If wake word has poor accuracy, prefer hotkey
        wake_accuracy = wake_stats.get("accuracy", [])
        if wake_accuracy and sum(wake_accuracy[-10:]) / len(wake_accuracy[-10:]) < 0.7:
            reasons.append("Poor wake word accuracy")
            return "hotkey", reasons
        
        # Default to wake word for hands-free operation
        reasons.append("Optimal conditions for hands-free")
        return "wake_word", reasons
    
    def switch_mode(self, new_mode):
        """Switch to a different voice mode"""
        if new_mode == self.current_mode:
            return
        
        self.log(f"Switching from {self.current_mode} to {new_mode}")
        
        # Stop current daemon
        if self.daemon_process:
            self.daemon_process.terminate()
            self.daemon_process.wait()
        
        # Start new daemon
        if new_mode == "wake_word":
            self.daemon_process = subprocess.Popen([
                os.path.expanduser("~/.bill-sloth/voice/venv/bin/python"),
                os.path.expanduser("~/.bill-sloth/voice/voice_daemon.py")
            ])
        elif new_mode == "hotkey":
            self.daemon_process = subprocess.Popen([
                os.path.expanduser("~/.bill-sloth/voice/venv/bin/python"),
                os.path.expanduser("~/.bill-sloth/voice/hotkey_daemon.py")
            ])
        
        self.current_mode = new_mode
        
        # Update config
        self.config["mode"] = new_mode
        self.save_config()
    
    def monitor_performance(self):
        """Monitor daemon performance and adjust if needed"""
        while True:
            try:
                time.sleep(self.config.get("resource_check_interval", 300))
                
                if self.config.get("auto_switch_enabled", True):
                    optimal_mode, reasons = self.get_optimal_mode()
                    
                    if optimal_mode != self.current_mode:
                        self.log(f"Auto-switching to {optimal_mode}: {', '.join(reasons)}")
                        self.switch_mode(optimal_mode)
                
            except Exception as e:
                self.log(f"Error in performance monitoring: {e}")
    
    def run(self):
        """Main adaptive daemon"""
        self.log("Adaptive voice daemon started")
        
        # Determine initial mode
        initial_mode, reasons = self.get_optimal_mode()
        self.log(f"Initial mode: {initial_mode} ({', '.join(reasons)})")
        self.switch_mode(initial_mode)
        
        # Start performance monitoring
        monitor_thread = threading.Thread(target=self.monitor_performance, daemon=True)
        monitor_thread.start()
        
        try:
            # Keep main thread alive
            while True:
                time.sleep(1)
                
                # Check if daemon crashed
                if self.daemon_process and self.daemon_process.poll() is not None:
                    self.log("Voice daemon crashed, restarting...")
                    self.switch_mode(self.current_mode)
                
        except KeyboardInterrupt:
            self.shutdown()
    
    def shutdown(self):
        """Shutdown adaptive daemon"""
        self.log("Shutting down adaptive daemon...")
        if self.daemon_process:
            self.daemon_process.terminate()

if __name__ == "__main__":
    daemon = AdaptiveVoiceDaemon()
    daemon.run()
EOF
    
    chmod +x ~/.bill-sloth/voice/adaptive_daemon.py
    log_voice "✅ Adaptive daemon created"
}

create_voice_config_manager() {
    log_voice "⚙️ Creating voice configuration manager..."
    
    cat > ~/.bill-sloth/voice/voice_config.py << 'EOF'
#!/usr/bin/env python3
"""
Voice Configuration Manager - Easy switching between voice modes
"""

import json
import os
import subprocess
import sys

class VoiceConfigManager:
    def __init__(self):
        self.config_file = os.path.expanduser("~/.bill-sloth/voice/config.json")
        self.load_config()
    
    def load_config(self):
        """Load configuration"""
        try:
            with open(self.config_file, 'r') as f:
                self.config = json.load(f)
        except FileNotFoundError:
            self.config = self.create_default_config()
            self.save_config()
    
    def save_config(self):
        """Save configuration"""
        os.makedirs(os.path.dirname(self.config_file), exist_ok=True)
        with open(self.config_file, 'w') as f:
            json.dump(self.config, f, indent=2)
    
    def create_default_config(self):
        """Create default configuration"""
        return {
            "mode": "auto",
            "auto_switch_enabled": True,
            "hotkey_combo": ["ctrl", "alt", "v"],
            "wake_words": ["hey bill", "bill sloth", "jarvis", "computer"],
            "record_duration": 5,
            "feedback_enabled": True,
            "cpu_threshold": 15.0,
            "accuracy_threshold": 0.8
        }
    
    def show_current_config(self):
        """Display current configuration"""
        print("\n🎤 CURRENT VOICE CONFIGURATION")
        print("=" * 35)
        print(f"Mode: {self.config.get('mode', 'auto')}")
        print(f"Auto-switching: {self.config.get('auto_switch_enabled', True)}")
        print(f"Hotkey: {'+'.join(self.config.get('hotkey_combo', ['ctrl', 'alt', 'v'])).upper()}")
        print(f"Wake words: {', '.join(self.config.get('wake_words', []))}")
        print(f"Record duration: {self.config.get('record_duration', 5)} seconds")
        print(f"Voice feedback: {self.config.get('feedback_enabled', True)}")
    
    def set_mode(self, mode):
        """Set voice control mode"""
        valid_modes = ["auto", "wake_word", "hotkey"]
        if mode not in valid_modes:
            print(f"❌ Invalid mode. Choose from: {', '.join(valid_modes)}")
            return
        
        self.config["mode"] = mode
        self.save_config()
        print(f"✅ Voice mode set to: {mode}")
        
        # Restart voice service
        self.restart_voice_service()
    
    def set_hotkey(self, keys):
        """Set hotkey combination"""
        self.config["hotkey_combo"] = keys
        self.save_config()
        print(f"✅ Hotkey set to: {'+'.join(keys).upper()}")
    
    def toggle_auto_switch(self):
        """Toggle auto-switching"""
        current = self.config.get("auto_switch_enabled", True)
        self.config["auto_switch_enabled"] = not current
        self.save_config()
        status = "enabled" if not current else "disabled"
        print(f"✅ Auto-switching {status}")
    
    def restart_voice_service(self):
        """Restart the voice service"""
        try:
            subprocess.run(["systemctl", "--user", "restart", "bill-voice-daemon"], check=True)
            print("✅ Voice service restarted")
        except subprocess.CalledProcessError:
            print("⚠️ Failed to restart voice service")
    
    def show_menu(self):
        """Show configuration menu"""
        while True:
            print("\n🎤 VOICE CONFIGURATION MENU")
            print("=" * 30)
            print("1) Show current configuration")
            print("2) Set mode (auto/wake_word/hotkey)")
            print("3) Change hotkey combination")
            print("4) Toggle auto-switching")
            print("5) Test current setup")
            print("6) Restart voice service")
            print("0) Exit")
            
            choice = input("\nChoose option (0-6): ")
            
            if choice == '1':
                self.show_current_config()
            elif choice == '2':
                mode = input("Enter mode (auto/wake_word/hotkey): ").lower()
                self.set_mode(mode)
            elif choice == '3':
                print("Enter hotkey combination (e.g., ctrl alt v):")
                keys = input().lower().split()
                self.set_hotkey(keys)
            elif choice == '4':
                self.toggle_auto_switch()
            elif choice == '5':
                subprocess.run([sys.executable, os.path.expanduser("~/.bill-sloth/bin/test-voice-control")])
            elif choice == '6':
                self.restart_voice_service()
            elif choice == '0':
                break
            else:
                print("❌ Invalid choice")

if __name__ == "__main__":
    manager = VoiceConfigManager()
    manager.show_menu()
EOF
    
    chmod +x ~/.bill-sloth/voice/voice_config.py
    log_voice "✅ Voice configuration manager created"
}

create_systemd_services() {
    log_voice "🔧 Creating systemd services for both modes..."
    
    # Adaptive daemon service (main service)
    cat > ~/.config/systemd/user/bill-voice-adaptive.service << 'EOF'
[Unit]
Description=Bill Sloth Adaptive Voice Control
After=pulseaudio.service

[Service]
Type=simple
ExecStart=%h/.bill-sloth/voice/venv/bin/python %h/.bill-sloth/voice/adaptive_daemon.py
Restart=always
RestartSec=5
Environment=DISPLAY=:0
Environment=PULSE_RUNTIME_PATH=%t/pulse

[Install]
WantedBy=default.target
EOF
    
    # Hotkey-only service (alternative)
    cat > ~/.config/systemd/user/bill-voice-hotkey.service << 'EOF'
[Unit]
Description=Bill Sloth Hotkey Voice Control
After=pulseaudio.service

[Service]
Type=simple
ExecStart=%h/.bill-sloth/voice/venv/bin/python %h/.bill-sloth/voice/hotkey_daemon.py
Restart=always
RestartSec=5
Environment=DISPLAY=:0
Environment=PULSE_RUNTIME_PATH=%t/pulse

[Install]
WantedBy=default.target
EOF
    
    # Update original wake word service
    sed -i 's/bill-voice-daemon/bill-voice-wakeword/' ~/.config/systemd/user/bill-voice-daemon.service
    
    systemctl --user daemon-reload
    log_voice "✅ Systemd services created"
}

show_voice_modes() {
    echo "🎤 VOICE CONTROL MODES EXPLAINED"
    echo "================================="
    echo ""
    echo "🤖 WAKE WORD MODE (Always Listening):"
    echo "✅ Pros:"
    echo "   • Truly hands-free operation"
    echo "   • Natural 'Hey Bill' activation"
    echo "   • Works while typing/gaming"
    echo "   • Jarvis-like experience"
    echo ""
    echo "⚠️ Cons:"
    echo "   • Higher CPU/battery usage"
    echo "   • Always listening (privacy concern)"
    echo "   • May have false activations"
    echo "   • Background processing"
    echo ""
    echo "🔥 HOTKEY MODE (Push-to-Talk):"
    echo "✅ Pros:"
    echo "   • Very low resource usage"
    echo "   • Complete privacy (only listens when key pressed)"
    echo "   • No false activations"
    echo "   • Instant activation"
    echo ""
    echo "⚠️ Cons:"
    echo "   • Requires key press (not fully hands-free)"
    echo "   • Need to remember hotkey"
    echo "   • Can't activate while hands are busy"
    echo ""
    echo "🧠 AUTO MODE (Best of Both):"
    echo "✅ Pros:"
    echo "   • Automatically chooses optimal mode"
    echo "   • Switches based on system load"
    echo "   • Battery-aware switching"
    echo "   • Performance monitoring"
    echo ""
    echo "⚙️ Auto-switching triggers:"
    echo "   • High CPU → Switch to hotkey"
    echo "   • On battery → Switch to hotkey"
    echo "   • Poor accuracy → Switch to hotkey"
    echo "   • Normal conditions → Switch to wake word"
    echo ""
    echo "🎯 RECOMMENDED SETUP:"
    echo "   • Start with AUTO mode"
    echo "   • Hotkey: Ctrl+Alt+V"
    echo "   • Wake words: 'Hey Bill', 'Jarvis'"
    echo "   • Let system adapt to your usage"
}

main_switcher() {
    clear
    show_banner
    
    echo -e "\033[38;5;129m🎤 VOICE MODE SWITCHER - FLEXIBLE VOICE CONTROL OPTIONS 🎤\033[0m"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo ""
    echo "🎯 ADDING FLEXIBLE VOICE CONTROL:"
    echo "• Wake word mode (always listening)"
    echo "• Hotkey mode (push-to-talk)"
    echo "• Auto mode (smart switching)"
    echo "• Easy configuration management"
    echo ""
    
    log_voice "🚀 Starting voice mode switcher setup..."
    
    # Create Python dependencies
    source ~/.bill-sloth/voice/venv/bin/activate 2>/dev/null || {
        echo "❌ Voice environment not found. Run voice-control-optimizer first."
        exit 1
    }
    
    # Install additional dependencies
    pip install pynput psutil >/dev/null 2>&1
    deactivate
    
    # Create components
    create_hotkey_daemon
    echo "✅ Hotkey daemon created"
    
    create_adaptive_voice_daemon
    echo "✅ Adaptive daemon created"
    
    create_voice_config_manager
    echo "✅ Configuration manager created"
    
    create_systemd_services
    echo "✅ Systemd services updated"
    
    show_voice_modes
    
    echo ""
    echo "🎉 VOICE MODE SWITCHER COMPLETE!"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo ""
    echo "🧠 Carl: 'Now you have voice control exactly how you want it!'"
    echo ""
    echo "✅ THREE VOICE MODES AVAILABLE:"
    echo "• 🤖 Wake Word: 'Hey Bill', 'Jarvis' (hands-free)"
    echo "• 🔥 Hotkey: Ctrl+Alt+V (push-to-talk)"
    echo "• 🧠 Auto: Smart switching based on conditions"
    echo ""
    echo "🎯 CONFIGURATION COMMANDS:"
    echo "• Configure: python3 ~/.bill-sloth/voice/voice_config.py"
    echo "• Start adaptive: systemctl --user start bill-voice-adaptive"
    echo "• Start hotkey only: systemctl --user start bill-voice-hotkey"
    echo ""
    echo "💡 DEFAULT SETUP:"
    echo "• Mode: Auto (switches intelligently)"
    echo "• Hotkey: Ctrl+Alt+V"
    echo "• Wake words: 'Hey Bill', 'Jarvis', 'Computer'"
    echo ""
    
    read -p "Start adaptive voice control now? (y/n): " start_now
    if [[ "$start_now" =~ ^[Yy] ]]; then
        echo "🎤 Starting adaptive voice control..."
        systemctl --user enable bill-voice-adaptive.service
        systemctl --user start bill-voice-adaptive.service
        echo "✅ Adaptive voice control started!"
        echo "🎯 Try both: Say 'Hey Bill, system status' OR press Ctrl+Alt+V and speak"
    fi
    
    log_voice "✅ Voice mode switcher setup completed successfully"
}

# Run the switcher
main_switcher